---
layout: post
title:  "Bugcrowd 0x07 Levelup CTF"
date:   2020-08-30 16:25:10 +0545
author: machinexa
image: /writeups/assets/images/bugcrowd0x07.jpg
category: Writeups
---

I started playing this CTF and thought that i couldn't complete, but still tried. The url given was [https://07.levelupctf.com/radio](https://07.levelupctf.com/radio) and description says we are an **Agent** in top secret operation: Hack Another Day. The CTF had 7 flags in total.

# Flag 1
Visiting the url, browser gets redirected to `/login`. After trying basic SQLi payloads and default credentials, i start to look at JS files for potential attack vector. I use my custom made tool *JScanner* to extract sensitive info and i get `FLAG{504e8256b8a208845fe18a77e7b304b7}` in comment as well as new url.

# Flag 2
I downloaded an apk from that url. Since i never did apk decompiling and static code analysis it was going to be hard. For some reasons, i dont like java, still somehow i had mindset to complete the CTF. Using apktool i decompiled the apk file. 
```
root@kali-linux:~/tmp/CTF/Bugcrowd0x07/apks# apktool d communications.apk 
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
I: Using Apktool 2.4.1-dirty on communications.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: /root/.local/share/apktool/framework/1.apk
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...
```

Looking through the files, i was overwhelmed as it was lot of files, and all i was getting was unreadable **.smali** files. Again, googling for bit showed me other tool that does decompiling very well. I used [Online Java Decompiler](http://www.javadecompilers.com/apk) and got nice looking .java files. I got the second flag `FLAG{a445c73c8cb97421d1923a8c51c221fd}` by doing `grep -ir "FLAG"`. I was tired then and went to sleep.

# Flag 3
Third flag was difficult to find. I did dynamic analysis but it errored out when using the app. Going through all **.java** files, **MainActivity.java** was interesting. I found two different endpoints `/d41d8cd98f00b204e9800998ecf8427e/8cd98f00b204e9800998/forgotpassword` and `/fa694c73da13c94e49cc82b/06a28bdb78b6c02e16862a3/chat` from two different functions.

![Apk Code](/writeups/assets/images/bugcrowd0x07_apk_code.png)

Going to forgotpassword endpoint, i can enumerate users from its error message and chat endpoint was forbidden to access as i wasnt authorized. Looking at the source code again, there is some sort of authentication mechanism by using header `3NCRYPT3D-CH4T`.So, i looked more and more into java files and finally found its key through grep.
```
root@kali-linux:~/tmp/CTF/Bugcrowd0x07/source/source_code# rgrep "ENCRYPTED" -i
sources/com/example/levelup/MainActivity.java:    public void encryptedChat() {
sources/com/example/levelup/MainActivity.java:        String key = getApplicationContext().getString(R.string.encrypted_chat_key);
sources/com/example/levelup/C0262R.java:        public static final int encrypted_chat_key = 2131492892;
sources/com/example/helloworld/R.java:        public static final int encrypted_chat_key = 2131492892;
Binary file resources/classes.dex matches
resources/res/values/strings.xml:    <string name="encrypted_chat_key">8b0955d2682eb74347b9e71ea0558c67</string>
resources/res/values/public.xml:    <public type="string" name="encrypted_chat_key" id="2131492892" />
```
<br>
Having header and key, i visited the url and got chat which looks obsfucated. Hmm, nice giraffe.

![Encrypted Chat](/writeups/assets/images/bugcrowd0x07_encrypted_chat.png)

We get the flag `FLAG{e8606532b027bfd324ea31d1b4f116c2}` and geolocation data **37°43'58.5"N 122°30'08.5"W** by looking at the exif metadata of giraffe picture.

# Flag 4
My intuition says that either its `ROT13` or `ROT47` and it turned out to be ciphertext of ROT13.
After, decrypting, we get this: 
```
agent_nova: meow
agent_5a247455: MESSAGE_DELETED
agent_521bcd5: Have you got word on our new mission yet
agent_5a247455: yeah we do, check the "mission list". they caught some HACK Agent as well
agent_521bcd5: thats crazy, anyways check out this dope giraffe i saw at the zoo the other day
agent_5a247455: hahahaha thats awesome
```
<br>
Nothing interesting except those usernames. I tried using all those usernames in forgotpassword endpoint and only two of them exist. To reset thier password, a secret question has to be answered. They were:  
**1) Whats the name of your favourite animal lion at the zoo?**   
**2) Whats your favourite hobby?**  
I was stuck at this point and looking at discussion in discord and talking with some friends, i got hint to OSINT by geolocation. I used googlemaps for this purpose and got a zoo name **San Francisco Zoo**. 

![Googlemap OSINT](/writeups/assets/images/bugcrowd0x07_googlemaps_osint.png)

Searching their twitter page, website and other social media, i got nothing. I was trying to bruteforce lion names. After spending lot of hours on OSINT, i simply decided to search SF Zoo Lion name and got answer Jahari. I logged in using password the reset page provided and got a dashboard with target list. However, there was no flag. At start i said that `/radio` endpoint caused redirection to `/login` probably due to fact we weren't logged in. Visiting the endpoint `/radio` give me flag as well as message that there is something hidden inside agent images.

![Radio Endpoint](/writeups/assets/images/bugcrowd0x07_radio_endpoint.png)

The exfiltration of data through ping is useless. However, i got the password **pwn4llthebugz** as well as flag `FLAG{f0dee25f617e2cb820b9b44fcdf90ed8}`

# Flag 5
There were 9 images and i tried different steganography techniques and tools. Manually viewing the image shows random numbers inside of pics. I got 3 random numbers: 1337,2099,921. One of my friend showed through changing image temperature that there is another number 415 inside one image. 

![Temperature Changed](/writeups/assets/images/bugcrowd0x07_color_temperature.png)

I wonder whats the use of those numbers.Also, binwalk showed that some data are embedded inside it.

![Binwalk Image](/writeups/assets/images/bugcrowd0x07_binwalk.png)

Trying to extract all data from **binwalk**, recursively for all files with more data embedded inside them, it was a tough job. However, there was nothing and i wasted my precious 1-2 hours. Soon, i tried bruteforcing as images were in format *agent1.jpg*,*agent2.jpg*,... I found out there was a picture called *agent87.jpg*. Using **Steghide** with password **pwn4llthebugz** extracted a file called console.txt with the following data in it.
```
root@kali-linux:~/tmp/CTF/Bugcrowd0x07/targets/other_agents# cat console.txt 
Dear agent_521bcd5,

As ordered by Matriarch, I have created a backdoor console that will allow us to launch WannaSpy when time is right.

We're not worried about anyone getting in since they have to go through many doors to actually get in.

Once you are ready, you will find that the console lives on 3389.

FLAG{f0dee25f617e2cb820b9b44fcdf90ed8}

Regards
agent_1337
```
<br>
Here's our dear flag `FLAG{f0dee25f617e2cb820b9b44fcdf90ed8}`.

# Flag 6
It was insanely difficult to get this flag. Nmap shows port 3389 as closed. Now, i was stuck. Again, going to official bugcrowd discord server, i found that we have to do port knocking. The random numbers were port numbers, all of them were closed. For those who dont know what port knocking is:    
<br>
`"In computer networking, port knocking is a method of externally opening ports on a firewall by generating a connection attempt on a set of prespecified closed ports. Once a correct sequence of connection attempts is received, the firewall rules are dynamically modified to allow the host which sent the connection attempts to connect over specific port(s)"`  
<br>
I soon developed a python3 script that automates this job using itertools. I initally used **knock** for port knocking but it didnt work. That was frustating, soon i used nc for port knocking and that didnt work too. That was more frustating. Finally i used nmap and script looked something like this
```python
root@kali-linux:~/tmp/CTF/Bugcrowd0x07 cat PortKnocker.py 
from itertools import permutations 
import os

ports = [1337,415,2099,921,3389]
permutations_object = permutations(ports)
permutations_list = list(permutations_object)

def port_knock():
    try:
        for x in range(0,120):
            print(permutations_list[x])
            os.system('nmap -p {},{},{},{},{} 07.levelupctf.com'.format(permutations_list[x][0], permutations_list[x][1], permutations_list[x][2],permutations_list[x][3], permutations_list[x][4]))
    except Exception as E:
	print(E)
port_knock()
```
<br>
The script worked fine and it opened the port. Yay! I initially mistaked that port for **RDP** and tried to connect through **RDP protocol** but it didnt work. Later, i visited in browser and it worked like charm. However, there was no console :(. Dirbusting a bit got me `/console` endpoint which had python3 interactive interpreter. It was the **Werkzeug debug console**.

![Werkzeug console](/writeups/assets/images/bugcrowd0x07_werkzeug.png)
  
I looked at source code, js files and urls. There was a secret variable exposed in javascript file but i couldnt use it. Doing **searchsploit** showed me Werkzeug console had an exploit. The metasploit exploit didnt work for some reasons so i opted for custom exploit. I got a shell after using that exploit and got another flag `FLAG{022d8a7a561a02c371fd7c5ec3e5ea06}`

# Flag 7
Flag 7 was very easy. There were credentials in `/opt/credentials` and i logged in using that creds. There was a button to destroy the WannaSpy spyware and i did it. I defeated *The Matriarch* and got 7th flag.

![The Matriarch](/writeups/assets/images/bugcrowd0x07_matriarch.png)
